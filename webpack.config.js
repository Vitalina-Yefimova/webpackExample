const path = require('path') // Подключение модуля 'path' для работы с путями в файловой системе

const HtmlWebpackPlugin = require('html-webpack-plugin') // Подключение плагина HtmlWebpackPlugin для работы с HTML-файлами

module.exports = {
  entry: './src/js/main.js', // entry point - главный файл входа для сборки JS кода
  output: {
    filename: 'bundle.[contenthash].js', // Название итогового скомпилированного JS
    // [contenthash] — это динамическая метка, которая генерирует хеш на основе содержимого файла. Каждый раз, когда содержимое файла меняется, 
    // хеш будет изменяться, и, соответственно, изменится имя файла. Если файл не менялся, хеш не будет изменяться, и браузер продолжит использовать старую версию файла из кэша.
    path: path.resolve(__dirname, 'docs'), // Абсолютный путь к директории, в которую будут выводиться скомпилированные файлы
  // __dirname -  это переменная, которая указывает абсолютный путь к каталогу, содержащему текущий исполняемый файл
    clean: true, // Очищает папку 'output' перед каждой сборкой, удаляя старые/ненужные файлы 
  },
  module: {
    rules: [
      {
        test: /\.js$/,  // Применяет правило к файлам с расширением .js
        exclude: /node.modules/, // Исключение, содержимое которого не обрабатывается
        use: {
          loader: 'babel-loader', // Для транспиляции JS
          options: {
            presets: ['@babel/preset-env'], // Используется preset для поддержки современного синтанксиса JS в старых браузерах
          },
        },
      },

      {
        test: /\.scss$/, // Применяет правило к файлам с расширением .scss
        use: ['style-loader', 'css-loader', 'sass-loader'], // Список лоадеров для обработки (применяютя справа - налево)
  // sass-loader -компилирует SCSS в обычный CSS, преобразуя SCSS-синтаксис (переменные, миксины, вложенные стили) в стандартный CSS
  // css-loader - обрабатывает CSS, разбивает его на модули и позволяет импортировать в JS, а также обрабатывает импорты других файлов (шрифты, изображения и т.д.)
  // style-loader - вставляет CSS в HTML, добавляя его в тег <style> в <head>, обеспечивая динамическую подгрузку стилей
      },
      
      {
        test: /\.(jpg|jpeg|png|gif)$/i,
        type: 'asset/resource', // Применяет правило к файлам с расширением .jpg|.jpeg|.png|.gif
      },
      
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/i,
        type: 'asset/resource', //  Применяет правило к файлам с расширением .woff|.woff2|.eot|.ttf|.otf
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html', // Исходный HTML для использования в качкстве шаблона
      filename: 'index.html', // Название итогового HTML, который будет создан в папке 'output'
    }),
  ],
  mode: 'development', // Указывает на то, что сборка будет выполнена в режиме разработки (более удобные для отладки настройки, не минимизируя код)
}